/*
 * Movie Renamer
 * Copyright (C) 2012 Nicolas Magré
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package fr.free.movierenamer.ui.panel;

import com.alee.extended.image.WebImageGallery;
import com.alee.laf.checkbox.WebCheckBox;
import com.alee.laf.label.WebLabel;
import com.alee.laf.list.DefaultListModel;
import com.alee.laf.list.WebList;
import com.alee.laf.panel.WebPanel;
import com.alee.laf.tabbedpane.WebTabbedPane;
import com.alee.laf.text.WebTextArea;
import com.alee.laf.text.WebTextField;
import com.alee.laf.toolbar.WebToolBar;
import com.alee.managers.popup.PopupWay;
import fr.free.movierenamer.info.MediaInfo;
import fr.free.movierenamer.info.MovieInfo;
import fr.free.movierenamer.ui.MovieRenamer;
import fr.free.movierenamer.ui.settings.UISettings;
import fr.free.movierenamer.ui.utils.UIUtils;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.*;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.border.LineBorder;

/**
 * Class MoviePanel
 *
 * @author Magré Nicolas
 */
public class MoviePanel extends MediaPanel {

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private WebTextField directorField;
  private WebPanel filePanel;
  private WebTabbedPane imageTp;
  private WebTabbedPane movieInfoTp;
  private WebPanel moviePanel;
  private WebTextField origTitleField;
  private WebTextArea synopsisArea;
  private JScrollPane synopsisSp;
  private WebLabel webLabel1;
  private WebLabel webLabel2;
  private WebLabel webLabel3;
  private WebLabel webLabel4;
  private WebPanel webPanel1;
  private WebPanel webPanel2;
  private WebTextField webTextField1;
  private WebTextField webTextField2;
  private WebTextField webTextField3;
  private WebTextField webTextField4;
  private WebToolBar webToolBar1;
  // End of variables declaration//GEN-END:variables
  private static final long serialVersionUID = 1L;
  private final UISettings setting;
  private MediaInfo mediaInfo;
  private final MovieRenamer mr;

  /**
   * Creates new form MoviePanel
   *
   * @param mr
   */
  public MoviePanel(MovieRenamer mr) {
    this.mr = mr;
    this.setting = UISettings.getInstance();

    initComponents();
    webToolBar1.addToEnd(UIUtils.createSettingbutton(PopupWay.leftDown, "settingHelp", true, new WebCheckBox()));
  }

  @Override
  public void clear() {
    SwingUtilities.invokeLater(new Thread() {
      @Override
      public void run() {
        mediaInfo = null;
        clearStars();
      }
    });
  }

  @Override
  public void setMediaInfo(MediaInfo mediaInfo) {
    this.mediaInfo = mediaInfo;
    MovieInfo movieInfo = (MovieInfo) mediaInfo;
    setRate(movieInfo.getRating());
  }

  @Override
  public MediaInfo getMediaInfo() {
    return mediaInfo;
  }

  @Override
  public WebList getCastingList() {
    return null;
  }

  @Override
  public WebList getThumbnailsList() {
    return null;
  }

  @Override
  public WebImageGallery getFanartsList() {
    return null;
  }

  @Override
  public WebList getSubtitlesList() {
    throw new UnsupportedOperationException("Not supported yet.");
  }

  /**
   * This method is called from within the constructor to initialize the form.
   */
  //WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    movieInfoTp = new WebTabbedPane();
    moviePanel = new WebPanel();
    origTitleField = new WebTextField();
    directorField = new WebTextField();
    synopsisSp = new JScrollPane();
    synopsisArea = new WebTextArea();
    webTextField1 = new WebTextField();
    webTextField2 = new WebTextField();
    webTextField3 = new WebTextField();
    webTextField4 = new WebTextField();
    filePanel = new WebPanel();
    imageTp = new WebTabbedPane();
    webPanel1 = new WebPanel();
    webLabel1 = new WebLabel();
    webLabel2 = new WebLabel();
    webLabel3 = new WebLabel();
    webLabel4 = new WebLabel();
    webPanel2 = new WebPanel();
    webToolBar1 = new WebToolBar();

    setMinimumSize(new Dimension(10, 380));
    setPreferredSize(new Dimension(562, 400));

    origTitleField.setEditable(false);
    origTitleField.setFont(new Font("Ubuntu", 0, 12)); // NOI18N

    directorField.setEditable(false);
    directorField.setFont(new Font("Ubuntu", 0, 12)); // NOI18N

    synopsisArea.setColumns(20);
    synopsisArea.setRows(5);
    synopsisSp.setViewportView(synopsisArea);

    webTextField1.setText("webTextField1");

    webTextField2.setText("webTextField2");

    webTextField3.setText("webTextField3");

    GroupLayout moviePanelLayout = new GroupLayout(moviePanel);
    moviePanel.setLayout(moviePanelLayout);
    moviePanelLayout.setHorizontalGroup(
      moviePanelLayout.createParallelGroup(Alignment.LEADING)
      .addGroup(moviePanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(moviePanelLayout.createParallelGroup(Alignment.LEADING)
          .addComponent(synopsisSp)
          .addComponent(origTitleField, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(directorField, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(webTextField4, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(moviePanelLayout.createSequentialGroup()
            .addComponent(webTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(ComponentPlacement.UNRELATED)
            .addComponent(webTextField2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(ComponentPlacement.UNRELATED)
            .addComponent(webTextField3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        .addContainerGap())
    );
    moviePanelLayout.setVerticalGroup(
      moviePanelLayout.createParallelGroup(Alignment.LEADING)
      .addGroup(moviePanelLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(origTitleField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(ComponentPlacement.RELATED)
        .addComponent(directorField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(ComponentPlacement.RELATED)
        .addComponent(webTextField4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(ComponentPlacement.RELATED)
        .addGroup(moviePanelLayout.createParallelGroup(Alignment.BASELINE)
          .addComponent(webTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
          .addComponent(webTextField2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
          .addComponent(webTextField3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(ComponentPlacement.RELATED)
        .addComponent(synopsisSp, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addContainerGap(223, Short.MAX_VALUE))
    );

    movieInfoTp.addTab("Movie", moviePanel);

    GroupLayout filePanelLayout = new GroupLayout(filePanel);
    filePanel.setLayout(filePanelLayout);
    filePanelLayout.setHorizontalGroup(
      filePanelLayout.createParallelGroup(Alignment.LEADING)
      .addGap(0, 740, Short.MAX_VALUE)
    );
    filePanelLayout.setVerticalGroup(
      filePanelLayout.createParallelGroup(Alignment.LEADING)
      .addGap(0, 441, Short.MAX_VALUE)
    );

    movieInfoTp.addTab("File", filePanel);

    imageTp.setFont(new Font("Ubuntu", 1, 12)); // NOI18N

    webPanel1.setFont(new Font("Ubuntu", 1, 12)); // NOI18N

    webLabel1.setBorder(new LineBorder(new Color(204, 204, 204), 1, true));
    webLabel1.setHorizontalAlignment(SwingConstants.CENTER);
    webLabel1.addMouseListener(new MouseAdapter() {
      public void mouseReleased(MouseEvent evt) {
        webLabel1MouseReleased(evt);
      }
    });

    webLabel2.setBorder(new LineBorder(new Color(204, 204, 204), 1, true));
    webLabel2.setHorizontalAlignment(SwingConstants.CENTER);

    webLabel3.setText("Thumbnail");

    webLabel4.setText("Fanart");

    GroupLayout webPanel1Layout = new GroupLayout(webPanel1);
    webPanel1.setLayout(webPanel1Layout);
    webPanel1Layout.setHorizontalGroup(
      webPanel1Layout.createParallelGroup(Alignment.LEADING)
      .addGroup(webPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(webPanel1Layout.createParallelGroup(Alignment.LEADING)
          .addComponent(webLabel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
          .addGroup(webPanel1Layout.createSequentialGroup()
            .addGap(12, 12, 12)
            .addComponent(webLabel1, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE))
          .addComponent(webLabel2, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
          .addComponent(webLabel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        .addContainerGap(22, Short.MAX_VALUE))
    );
    webPanel1Layout.setVerticalGroup(
      webPanel1Layout.createParallelGroup(Alignment.LEADING)
      .addGroup(webPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(webLabel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(ComponentPlacement.RELATED)
        .addComponent(webLabel1, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(ComponentPlacement.UNRELATED)
        .addComponent(webLabel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(ComponentPlacement.RELATED)
        .addComponent(webLabel2, GroupLayout.PREFERRED_SIZE, 93, GroupLayout.PREFERRED_SIZE)
        .addContainerGap(104, Short.MAX_VALUE))
    );

    imageTp.addTab("Image", webPanel1);

    GroupLayout webPanel2Layout = new GroupLayout(webPanel2);
    webPanel2.setLayout(webPanel2Layout);
    webPanel2Layout.setHorizontalGroup(
      webPanel2Layout.createParallelGroup(Alignment.LEADING)
      .addGap(0, 710, Short.MAX_VALUE)
    );
    webPanel2Layout.setVerticalGroup(
      webPanel2Layout.createParallelGroup(Alignment.LEADING)
      .addGap(0, 450, Short.MAX_VALUE)
    );

    imageTp.addTab("More", webPanel2);

    webToolBar1.setFloatable(false);
    webToolBar1.setRollover(true);

    GroupLayout layout = new GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(Alignment.LEADING)
          .addComponent(webToolBar1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addComponent(imageTp, GroupLayout.PREFERRED_SIZE, 181, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(ComponentPlacement.RELATED)
            .addComponent(movieInfoTp, GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(Alignment.LEADING)
      .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(webToolBar1, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
        .addGap(14, 14, 14)
        .addGroup(layout.createParallelGroup(Alignment.LEADING)
          .addComponent(imageTp, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
          .addComponent(movieInfoTp, GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE))
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

  private void webLabel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_webLabel1MouseReleased
    SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        Gallerie gallerie = new Gallerie(mr);
        gallerie.setVisible(true);
      }
    });

  }//GEN-LAST:event_webLabel1MouseReleased

  @Override
  public DefaultListModel getCastingModel() {
    return null;
  }

  @Override
  public DefaultListModel getThumbnailsModel() {
    return null;
  }

  @Override
  public DefaultListModel getFanartsModel() {
    return null;
  }

  @Override
  public DefaultListModel getSubtitlesModel() {
    return null;
  }

  @Override
  public WebList getBannersList() {
    return null;
  }

  @Override
  public WebList getCdartsList() {
    return null;
  }

  @Override
  public WebList getLogosList() {
    return null;
  }

  @Override
  public WebList getClearartsList() {
    return null;
  }

  @Override
  public DefaultListModel getBannersModel() {
    return null;
  }

  @Override
  public DefaultListModel getCdartsModel() {
    return null;
  }

  @Override
  public DefaultListModel getLogosModel() {
    return null;
  }

  @Override
  public DefaultListModel getClearartsModel() {
    return null;
  }
}
